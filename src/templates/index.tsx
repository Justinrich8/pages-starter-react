/**
 * This is an example of how to create a template that makes use of streams data.
 * The stream data originates from Yext's Knowledge Graph. When a template in
 * concert with a stream is built by the Yext Sites system, a static html page
 * is generated for every corresponding (based on the filter) stream document.
 *
 * Another way to think about it is that a page will be generated using this
 * template for every eligible entity in your Knowledge Graph.
 */

 import * as React from "react";
 import { Profile, ProfileProvider } from "../types/data";
 import CommonLayout from "../layouts/Common";
 import { AlertBanner } from "../blocks/Banner/Banner.config";
 import { Hero } from "../blocks/Hero/Hero.config";
 import Divider from "../components/Divider";
 import { BasicCore } from "../blocks/Core/Core.config";
 import { FAQs } from "../blocks/FAQs/FAQs.config";
 import { Nearby } from "../blocks/Nearby/Nearby.config";
 import Map from "../blocks/Map/Map";
import { Data, GetHeadConfig, GetPath, Default, TemplateConfig } from "@yext/yext-sites-scripts";
 import "../index.css";
 
 /**
  * Required when Knowledge Graph data is used for a template.
  */
 export const config: TemplateConfig = {
   stream: {
     $id: "products",
     // Specifies the exact data that each generated document will contain. This data is passed in
     // directly as props to the default exported function.
     fields: [
       "id",
       "uid",
       "meta",
       "name",
       "address",
       "mainPhone",
       "description",
       "hours",
       "slug",
       "geocodedCoordinate",
       "services",
       "c_alertBanner",
       "c_hero",
       "c_faqs.name",
       "c_faqs.answer",
       "c_faqImage",
       "dm_directoryParents.name",
       "dm_directoryParents.slug",
     ],
     // Defines the scope of entities that qualify for this stream.
     filter: {
       entityTypes: ["location"],
     },
     // The entity language profiles that documents will be generated for.
     localization: {
       locales: ["en"],
       primary: false,
     },
   },
 };
 
 /**
  * Defines the path that the generated file will live at for production.
  *
  * NOTE: This currently has no impact on the local dev path. Local dev urls currently
  * take on the form: featureName/entityId
  */
 export const getPath: GetPath<Data> = (data: Data) => {
   return data.document.streamOutput.slug;
 };

 /**
 * This allows the user to define a function which will take in their template
 * data and procude a HeadConfig object. When the site is generated, the HeadConfig
 * will be used to generate the inner contents of the HTML document's <head> tag.
 * This can include the title, meta tags, script tags, etc.
 */
export const getHeadConfig: GetHeadConfig<Data> = (data) => {
  return {
    title: data.document.streamOutput.name,
    charset: "UTF-8",
    viewport: "width=device-width, initial-scale=1",
    tags: [
      {
        type: "meta",
        attributes: {
          description: "This site was generated by the Yext SSG",
        },
      },
    ],
  };
};
 
/**
* This is the main template. It can have any name as long as it's the default export.
* The props passed in here are the direct stream document defined by `config`.
*
* There are a bunch of custom components being used from the src/components folder. These are
* an example of how you could create your own. You can set up your folder structure for custom
* components any way you'd like as long as it lives in the src folder (though you should not put
* them in the src/templates folder as this is specific for true template files).
*/
const Index: Default<Data> = (props) => {
  const { document } = props;
  const { streamOutput } = document;
  return (
    <ProfileProvider value={streamOutput as Profile}>
      <CommonLayout
        streamOutput={streamOutput}
        content={
          <>
            <AlertBanner />
            <Hero />
            <Divider />
            <BasicCore />
            <Map />
            <FAQs />
            <Nearby />
          </>
        }
      />
    </ProfileProvider>
  );
};

export default Index;